import{_ as s,o as a,c as n,X as t}from"./chunks/framework.7c15df5f.js";const f=JSON.parse('{"title":"pathParse","description":"","frontmatter":{},"headers":[],"relativePath":"modules/path-prop/pathParse.md","filePath":"modules/path-prop/pathParse.md","lastUpdated":1692537577000}'),l={name:"modules/path-prop/pathParse.md"},p=t(`<h1 id="pathparse" tabindex="-1">pathParse <a class="header-anchor" href="#pathparse" aria-label="Permalink to &quot;pathParse&quot;">​</a></h1><p>一个字符串路径解析器</p><h2 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-label="Permalink to &quot;Demo&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pathParse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vill-v/path-prop</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">pathParse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test.test1[0].test2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;test&#39;,&#39;test1&#39;,0,&#39;test2&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">pathParse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test.test1[&quot;foo.bar&quot;].test2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [&#39;test&#39;,&#39;test1&#39;,&#39;foo.bar&#39;,&#39;test2&#39;]</span></span></code></pre></div><h2 id="dts" tabindex="-1">DTS <a class="header-anchor" href="#dts" aria-label="Permalink to &quot;DTS&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 解析路径</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">example</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * pathParse(&#39;data[0].test[\\&#39;foo.bar\\&#39;]&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // type [&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // result [&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * pathParse([&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;] as const)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // type [&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // result [&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * pathParse([&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // type (string|number)[]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * // result [&#39;data&#39;,0,&#39;test&#39;,&#39;foo.bar&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">path</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pathParse</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Path</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ToPath</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;;</span></span></code></pre></div>`,6),o=[p];function e(c,r,i,y,D,F){return a(),n("div",null,o)}const h=s(l,[["render",e]]);export{f as __pageData,h as default};
