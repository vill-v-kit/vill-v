import{_ as n,c as s,o as a,a as o}from"./app.6672c7b4.js";const f='{"title":"forceJsonParse","description":"","frontmatter":{},"headers":[{"level":2,"title":"Demo","slug":"demo"}],"relativePath":"modules/vanilla/forceJsonParse.md","lastUpdated":1652177014000}',p={},t=o(`<h1 id="forcejsonparse" tabindex="-1">forceJsonParse <a class="header-anchor" href="#forcejsonparse" aria-hidden="true">#</a></h1><p>\u4F7F<code>JSON.parse()</code> \u5FC5\u5B9A\u6210\u529F\uFF0C\u4E14\u62E5\u6709\u8FD4\u56DE\u503C</p><h2 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-hidden="true">#</a></h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>forceJsonParse<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vill-v/vanilla&#39;</span>

<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;&#39;</span>
<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;array&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; []</span>
<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; null</span>
<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; {}</span>
<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;origin&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;[&#39;</span>

<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[{&quot;foor&quot;:&quot;bar&quot;}]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt;[{foor:&#39;bar&#39;}]</span>
<span class="token function">forceJsonParse</span><span class="token punctuation">(</span><span class="token string">&#39;[{foor:&quot;bar&quot;}]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// =&gt;[{foor:&#39;bar&#39;}]</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forceJsonParse</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>jsonString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;origin&#39;</span><span class="token punctuation">,</span> loose<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forceJsonParse</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>jsonString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> loose<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forceJsonParse</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>jsonString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">,</span> loose<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forceJsonParse</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>jsonString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span> loose<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forceJsonParse</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>jsonString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;array&#39;</span><span class="token punctuation">,</span> loose<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div>`,5),e=[t];function c(l,r,k,i,u,d){return a(),s("div",null,e)}var y=n(p,[["render",c]]);export{f as __pageData,y as default};
